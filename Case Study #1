ERD Description:

--The sales table connects customers (customer_id) with their orders (product_id, order_date).
--The members table links to sales through customer_id and includes the membership join_date.
--The menu table connects to sales via product_id and includes product_name and price.


Select * from sales 
join  menu
on sales.product_id =menu. product_id
left join members  me
on sales.customer_id =me.customer_id
  

1. What is the total amount each customer spent at the restaurant?

Select s.customer_id,Sum(m.price) as amount_spent from sales s
join menu m
on s.product_id =m.product_id
group by s.customer_id;

2. How many days has each customer visited the restaurant?

Select s.customer_id,Count(distinct order_date)as cutsomer_visit_day
from sales s
group by s.customer_id;


3. What was the first item from the menu purchased by each customer?

Select customer_id, product_name from (
Select s.customer_id,m.product_name,s.order_date,row_number()over(partition by s.customer_id order by s.order_date) as rn
from sales s
join menu m
on s.product_id =m.product_id)a
where rn =1;

4. What is the most purchased item on the menu and how many times was it purchased by all customers?

Select top 1 m.product_name , count(*) as total_purchses
from sales s
join menu m
on s.product_id =m.product_id
group by m.product_name
order by total_purchses desc


5. Which item was the most popular for each customer?

Select customer_id ,product_name, cnt
from(
Select s.customer_id ,m.product_name, count(1)as cnt,dense_rank() over(partition  by customer_id order by count(1) desc)as rn
from sales s
join menu m
on s.product_id =m.product_id
group by s.customer_id ,m.product_name) a
where rn =1;


6. Which item was purchased first by the customer after they became a member?

Select customer_id,product_name 
from (Select s.customer_id,m.product_name, s.order_date,row_number() over(partition by s.customer_id order by s.order_date)as rn
from sales s
 join menu m
 on s.product_id =m.product_id
 join members me
 on s.customer_id =me.customer_id
 where s.order_date >me.join_date) as first_join 
 where rn =1


7. Which item was purchased just before the customer became a member?

Select customer_id,product_name from (
Select s.customer_id,m.product_name, s.order_date,row_number() over(partition by me.customer_id order by s.order_date desc)as rn
from sales s
 join menu m
 on s.product_id =m.product_id
 join members me
 on s.customer_id =me.customer_id
 where s.order_date < me.join_date) a
 where rn =1


8. What is the total items and amount spent for each member before they became a member?

Select s.customer_id, count(1) as total_items, sum(m.price) as amount_spent
from sales  s
join  menu m
on s.product_id =m. product_id
 left join members  me
on s.customer_id =me.customer_id
where s.order_date < me.join_date
group by s.customer_id


9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
with cte as (
Select s.customer_id,m.product_id, m.price,
case when m.product_name ='sushi' then m.price *20 else m.price *10 end as point
from sales  s
join  menu m
on s.product_id =m. product_id
)

Select customer_id ,sum(point) as total_point
from cte
group by customer_id


10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

Select s.customer_id,
sum(case when s.order_date between m.join_date and dateadd(day, 6, m.join_date) then me.price *20 else me.price *10 end )as points
from sales s
join members m
on s.customer_id =m.customer_id
join menu me
on s.product_id =me.product_id
where order_date <= '2021-01-31'
group by s.customer_id


--**Bonus Questions**

--1: 
Select s.customer_id,s.order_date,m.product_name,m.price,
case when s.order_date >=me.join_date then 'Y' else 'N' end as member 
from sales s
join menu m
on s.product_id =m.product_id
left join members me
on s.customer_id =me.customer_id

--2:
Select * ,
case when member ='Y' then row_number() over(partition by customer_id, member order by order_date)  else null end as ranking from (
Select s.customer_id,s.order_date,m.product_name,m.price,
case when s.order_date >=me.join_date then 'Y' else 'N' end as member 
from sales s
join menu m
on s.product_id =m.product_id
left join members me
on s.customer_id =me.customer_id) ranking_data


